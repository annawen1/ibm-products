import{p as S,j as e,a as oe,B as ie}from"./settings-CRrTVbgr.js";import{R as E,r as o}from"./index-CTjT7uj6.js";import{P as t}from"./index-BRV0Se7Z.js";import{u as re,c as C,_ as se}from"./deprecate-BLSDO8J_.js";import{F as ne}from"./Form-CYMUHmXc.js";import{S as ae,a as le}from"./SideNavItems-DXjpqQG4.js";import{S as de}from"./SideNavLinkText-D2z3G0zE.js";import{L as me}from"./Link-dZ21ZWDo.js";import{g as ce}from"./devtools-BECPDnEK.js";import{T as pe}from"./TearsheetShell-LKA4rQHG.js";import{S as ue}from"./StoryDocsPage-Bt8tN_UY.js";import{C as v}from"./Column-YOkLAWmq.js";import{I as he}from"./Notification-D8AtJmiN.js";import{N as fe}from"./NumberInput-BAY_6XtC.js";import{R as B}from"./RadioButton-e3vkHDFl.js";import{R as ge}from"./RadioButtonGroup-5O28pTwM.js";import{T as be}from"./Toggle-DKzAE0hq.js";import{T as P}from"./TextInput-Dn4YHwGS.js";import{F as xe}from"./FormGroup-jYEYux68.js";import{G as Y}from"./Grid-pQj43W1P.js";import{a as O}from"./chunk-MZXVCX43-CM0pFb8Z.js";import{S as Te,s as ye}from"./slug-rFMCSTUF.js";import"./index-BU4hwJwl.js";import"./events-D0gen66i.js";import"./index-DN5spsdJ.js";import"./useMatchMedia-WaDQbHZ3.js";import"./useResizeObserver-BvbgZjpI.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./ComposedModal-uB4X-JZy.js";import"./index-DcAOwtUU.js";import"./ButtonSet-CltDhnub.js";import"./InlineLoading-BAXzw7Vs.js";import"./bucket-5--iEWWNCt.js";import"./mergeRefs-CTUecegF.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-ldDxJswA.js";import"./index-DASh2Ycj.js";import"./index-JTvCgqhd.js";import"./LayerContext-BJwyboGm.js";import"./usePortalTarget-BYb2WbwP.js";import"./index-CJaoAHRt.js";import"./index-DshjxXYm.js";import"./useFocus-B-csjnZ_.js";import"./usePreviousValue-BqVTtLed.js";import"./ActionSet-B7TUuTqf.js";import"./props-helper-CMbLuKX0.js";import"./index-D2xy4Ma0.js";import"./iframe-DBTVSOxk.js";import"../sb-preview/runtime.js";import"./extends-CCbyfPlC.js";import"./index-C2eUe6cH.js";import"./inheritsLoose-SLCf_n8R.js";import"./toString-Cu7nsjnZ.js";import"./isSymbol-D87B3_a6.js";import"./index-D4-blIwu.js";import"./index-DrFu-skq.js";import"./story-helper-B-B3tTUV.js";import"./tslib.es6-CI8bilKU.js";import"./Text-CJa2B8Yb.js";import"./bucket-17-DCCQrBLC.js";import"./bucket-8-zc1UuW7K.js";import"./useNormalizedInputProps-DXf7f817.js";import"./FormContext-D0sdIVRD.js";import"./bucket-14-CVMjmpSy.js";import"./bucket-0-oY2tyfOj.js";import"./useControllableState-B1slDU0H.js";import"./bucket-16-C5jbOqAN.js";import"./useAnnouncer-MW4fVOqQ.js";import"./v4-CQkTLCs1.js";import"./index-75KDai46.js";const G=E.forwardRef(function(d,n){const s=re(),{children:h,className:m,isActive:c,href:g,...p}=d,i=C(`${s}--side-nav__menu-item`,m),a=C({[`${s}--side-nav__link`]:!0,[`${s}--side-nav__link--current`]:c});return E.createElement("li",{className:i},E.createElement(me,se({href:g},p,{className:a,ref:n}),E.createElement(de,null,h)))});G.displayName="SideNavMenuItem";G.propTypes={children:t.node,className:t.string,href:t.string,isActive:t.bool};const W="EditTearsheet",R=`${S.prefix}--tearsheet-edit`,H=o.createContext(null),J=o.createContext(0),z={verticalPosition:"normal",influencerWidth:"narrow",sideNavAriaLabel:"Side navigation"};let T=o.forwardRef(({cancelButtonText:r,children:d,className:n,description:s,influencerWidth:h=z.influencerWidth,label:m,onClose:c,open:g,submitButtonText:p,title:i,verticalPosition:a=z.verticalPosition,onRequestSubmit:w,onFormChange:y,sideNavAriaLabel:F=z.sideNavAriaLabel,...N},j)=>{const[_,k]=o.useState(0),[q,$]=o.useState([]),A=o.useRef(),I=u=>{k(u),y&&y(u)};function L(){return e.jsx("div",{className:`${R}__side-nav-wrapper`,children:e.jsx(ae,{"aria-label":F,className:`${R}__side-nav`,expanded:!0,isFixedNav:!1,children:e.jsx(le,{children:q.map((u,b)=>e.jsx(G,{onClick:()=>I(b),isActive:_===b,children:u},b))})})})}return e.jsx(pe,{...N,...ce(W),actions:[{key:"edit-action-button-submit",label:p,onClick:w,kind:"primary"},{key:"edit-action-button-cancel",label:r,onClick:c,kind:"ghost"}],className:C(R,n),description:s,hasCloseIcon:!1,influencer:L(),influencerPosition:"left",influencerWidth:h,label:m,onClose:c,open:g,size:"wide",title:i,verticalPosition:a,ref:j,children:e.jsx("div",{className:`${R}__content`,ref:A,role:"main",children:e.jsx(ne,{children:e.jsx(H.Provider,{value:{currentForm:_,setFormTitles:$},children:E.Children.map(d,(u,b)=>e.jsx(J.Provider,{value:b,children:u}))})})})})});T=S.checkComponentEnabled(T,W);T.displayName=W;T.propTypes={cancelButtonText:t.string,children:t.node,className:t.string,description:t.node,influencerWidth:t.oneOf(["narrow","wide"]),label:t.node,onClose:t.func,onFormChange:t.func,onRequestSubmit:t.func.isRequired,open:t.bool,sideNavAriaLabel:t.string,submitButtonText:t.string,title:t.node,verticalPosition:t.oneOf(["normal","lower"])};T.__docgenInfo={description:"Use Tearsheet with medium to complex edits. See usage guidance for further information.",methods:[],displayName:"EditTearsheet",props:{influencerWidth:{defaultValue:{value:"'narrow'",computed:!1},description:"Used to set the size of the influencer",type:{name:"enum",value:[{value:"'narrow'",computed:!1},{value:"'wide'",computed:!1}]},required:!1},verticalPosition:{defaultValue:{value:"'normal'",computed:!1},description:`The position of the top of tearsheet in the viewport. The 'normal'
position (the default) is a short distance down from the top of the
viewport, leaving room at the top for a global header bar to show through
from below. The 'lower' position provides a little extra room at the top
to allow an action bar navigation or breadcrumbs to also show through.`,type:{name:"enum",value:[{value:"'normal'",computed:!1},{value:"'lower'",computed:!1}]},required:!1},sideNavAriaLabel:{defaultValue:{value:"'Side navigation'",computed:!1},description:"Specifies the aria label for the SideNav from Carbon UIShell",type:{name:"string"},required:!1},cancelButtonText:{description:"The cancel button text",type:{name:"string"},required:!1},children:{description:"The main content of the tearsheet",type:{name:"node"},required:!1},className:{description:"An optional class or classes to be added to the outermost element.",type:{name:"string"},required:!1},description:{description:"A description of the flow, displayed in the header area of the tearsheet.",type:{name:"node"},required:!1},label:{description:`A label for the tearsheet, displayed in the header area of the tearsheet
to maintain context for the tearsheet (e.g. as the title changes from page
to page of a multi-page task).`,type:{name:"node"},required:!1},onClose:{description:"An optional handler that is called when the user closes the tearsheet (by\nclicking the close button, if enabled, or clicking outside, if enabled).\nReturning `false` here prevents the modal from closing.",type:{name:"func"},required:!1},onFormChange:{description:`An optional handler that is called when a user changes forms via clicking
an influencer nav item.
Returns the index of the selected form.`,type:{name:"func"},required:!1},onRequestSubmit:{description:"Specify a handler for submitting the tearsheet.",type:{name:"func"},required:!0},open:{description:"Specifies whether the tearsheet is currently open.",type:{name:"bool"},required:!1},submitButtonText:{description:"The submit button text",type:{name:"string"},required:!1},title:{description:"The main title of the tearsheet, displayed in the header area.",type:{name:"node"},required:!1}}};const ve=({formContext:r,formNumber:d,title:n})=>{o.useEffect(()=>{r&&r.setFormTitles(s=>{if(s[d]!==n){const m=[...s];return m[d]=n,m}return s})},[n,r,d])},D="EditTearsheetForm",x=`${S.prefix}--tearsheet-edit__form`,we={hasFieldset:!0};let f=o.forwardRef(({children:r,className:d,description:n,fieldsetLegendText:s,hasFieldset:h=we.hasFieldset,subtitle:m,title:c,...g},p)=>{const i=o.useContext(H),a=o.useContext(J);return ve({formContext:i,formNumber:a,title:c}),i?e.jsx("div",{...g,className:C(x,d,{[`${x}__form--hidden-form`]:a!==(i==null?void 0:i.currentForm),[`${x}__form--visible-form`]:a===(i==null?void 0:i.currentForm)}),ref:p,children:e.jsxs(Y,{children:[e.jsxs(v,{xlg:12,lg:12,md:8,sm:4,children:[e.jsx("h4",{className:`${x}--title`,children:c}),m&&e.jsx("h6",{className:`${x}--subtitle`,children:m}),n&&e.jsx("p",{className:`${x}--description`,children:n})]}),e.jsx(v,{span:100,children:h?e.jsx(xe,{legendText:s,className:`${x}--fieldset`,children:e.jsx(Y,{children:r})}):r})]})}):oe.warn(`You have tried using a ${D} component outside of a EditTearsheet. This is not allowed. ${D}s should always be children of the EditTearsheet`)});f=S.checkComponentEnabled(f,D);f.propTypes={children:t.node,className:t.string,description:t.string,fieldsetLegendText:t.string.isRequired.if(({hasFieldset:r})=>!!r),hasFieldset:t.bool,subtitle:t.string,title:t.node.isRequired};f.__docgenInfo={description:"",methods:[],displayName:"EditTearsheetForm",props:{hasFieldset:{defaultValue:{value:"true",computed:!1},description:"This optional prop will render your form content inside of a fieldset html element\nand is defaulted to true.\nYou can set this prop to `false` if you have multiple fieldset elements or want to control the children of your Full Page's form content.",type:{name:"bool"},required:!1},children:{description:"Content that shows in the tearsheet form",type:{name:"node"},required:!1},className:{description:"Sets an optional className to be added to the tearsheet form",type:{name:"string"},required:!1},description:{description:"Sets an optional description on the form component",type:{name:"string"},required:!1},fieldsetLegendText:{description:"This is the required legend text that appears above a fieldset html element for accessibility purposes.\nYou can set the `hasFieldset` prop to false if you have multiple fieldset elements or want to control the children of your Full Page's form content.\nOtherwise, use CSS to hide/remove this label text.",type:{name:"string"},required:!0},subtitle:{description:"Sets an optional subtitle on the form component",type:{name:"string"},required:!1},title:{description:"Sets the title text for a tearsheet form",type:{name:"node"},required:!0}}};const _e=".c4p--tearsheet-edit-multi-form__description{font-size:var(--cds-body-compact-01-font-size, .875rem);font-weight:var(--cds-body-compact-01-font-weight, 400);line-height:var(--cds-body-compact-01-line-height, 1.28572);letter-spacing:var(--cds-body-compact-01-letter-spacing, .16px);padding-bottom:.75rem}p.c4p--tearsheet-edit-multi-form__description:last-of-type{padding-bottom:2rem}.c4p--tearsheet-edit-multi-form__heading{font-weight:600}.c4p--tearsheet-edit-multi-form .c4p--tearsheet__content .cds--form-item{margin-bottom:1rem}.cds--tile-group div{display:flex;flex-wrap:wrap}.c4p--tearsheet-edit-multi-form--custom-tile{width:280px;height:240px;margin-right:1rem}.c4p--tearsheet-edit-multi-form--custom-tile .c4p--empty-state__illustration.c4p--empty-state__illustration--lg{min-width:120px;height:120px}.c4p--tearsheet-edit-multi-form--custom-tile-label{position:absolute;bottom:1rem;left:1rem}",K=()=>e.jsx(ue,{altGuidelinesHref:"https://pages.github.ibm.com/cdai-design/pal/patterns/edit/usage#tearsheet-edit",blocks:[{story:U,description:"This is used when you have one section per step. This can be created by passing\nin the overall `<EditTearsheet />` component and the `<EditTearsheetForm />`\ncomponent with form items as children:",source:{code:`<EditTearsheet {...props}>
  <EditTearsheetForm
    title="Required title"
    subtitle="Optional subtitle"
    description="Optional description"
    onNext={() => {
      'Optional function';
    }}
  >
    <TextInput
      id="test-1"
      invalidText="A valid value is required"
      labelText="Topic name"
      placeholder="Enter topic name"
    />
  </EditTearsheetForm>
</EditTearsheet>`}},{title:"Using custom components",description:"It is possible to use custom components that return `EditTearsheetForms` in\norder to help reduce the amount of logic in the component that contains the main\n`EditTearsheet`. _It is required that each child of the `EditTearsheet` either\nbe a custom step or a `EditTearsheetForm`_. An example of this could look like\nthe following:",source:{code:`const CreateFormCustom = ({ subtitle, ...rest }) => {
  return (
    <EditTearsheetForm {...rest} subtitle={subtitle} title="Form 1">
      form content here
    </EditTearsheetForm>
  );
};

const CreateComponent = () => {
  return (
    <EditTearsheet {...EditTearsheetProps}>
      <CreateFormCustom subtitle="Custom form subtitle" />
      <EditTearsheetForm
        title="Topic name"
        fieldsetLegendText="Topic information"
        subtitle="This is the unique name used to recognize your topic"
        description="It will also be used by your producers and consumers as part of the
        connection information, so make it something easy to recognize."
      >
        Content for second form
      </EditTearsheetForm>
    </EditTearsheet>
  );
};`}},{title:"Class names",description:"Additionally, to get the preferred styling when including your own children as\nsections, you can utilize the below included class names.\n\n| Class name                                            | Element     | Features                                                   |\n| ----------------------------------------------------- | ----------- | ---------------------------------------------------------- |\n| `#{$pkg-prefix}--create-tearsheet__form--title`       | title       | `productive-heading-04` & `margin-bottom` of `$spacing-05` |\n| `#{$pkg-prefix}--create-tearsheet__form--subtitle`    | subtitle    | `productive-heading-01` & `margin-bottom` of `$spacing-03` |\n| `#{$pkg-prefix}--create-tearsheet__form--description` | description | `body-long-01` & `margin-bottom` of `$spacing-06`          |\n| `#{$pkg-prefix}--create-tearsheet__form--fieldset`    | fieldset    | `margin-bottom` of `$spacing-05` to all children elements  |\n"}]});K.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const M=`${S.prefix}--tearsheet-edit-multi-form`,Q=({cancelButtonText:r,className:d,description:n,influencerWidth:s,label:h,slug:m,submitButtonText:c,title:g})=>{const[p,i]=o.useState(!1),[a,w]=o.useState(!1),[y,F]=o.useState("Topic name here"),[N,j]=o.useState("Topic description here"),[_,k]=o.useState("Topic value here"),[q,$]=o.useState("Location here"),[A,I]=o.useState(1),[L,u]=o.useState("one-day"),[b,V]=o.useState(!1),X=()=>{F(y),j(N),k(_),$(q),I(1),u("one-day"),w(!1),V(!1),i(!1)},Z=()=>{X(),O("onClose")()},ee=()=>{i(!1),O("onSubmit")()},te=()=>{O("handleFormChange")()};return e.jsxs("div",{children:[e.jsxs("style",{children:[`.${M} { opacity: 0 }`,";"]}),e.jsx(ie,{onClick:()=>i(!p),children:p?"Close EditTearsheet":"Open EditTearsheet"}),e.jsxs(T,{influencerWidth:s,label:h,className:C(M,d),submitButtonText:c,cancelButtonText:r,description:n,title:g,open:p,onRequestSubmit:ee,onClose:Z,onFormChange:te,slug:m&&Te(),children:[e.jsx(f,{title:"Topic name",fieldsetLegendText:"Topic information",subtitle:"This is the unique name used to recognize your topic",description:`It will also be used by your producers and consumers as part of the
          connection information, so make it something easy to recognize.`,children:e.jsxs(v,{xlg:8,lg:8,md:8,sm:8,children:[e.jsx(P,{labelText:"Topic name",placeholder:"Enter topic name",id:"tearsheet-multi-form-story-text-input-multi-form-1",value:y,onChange:l=>{l.target.value.length&&V(!1),F(l.target.value)},invalid:b,invalidText:"This is a required field",onBlur:()=>{y.length||V(!0)}}),e.jsx(P,{labelText:"Topic description (optional)",id:"tearsheet-multi-form-story-text-input-multi-form-1-input-2",value:N,placeholder:"Enter topic description",onChange:l=>j(l.target.value)}),e.jsx(P,{labelText:"Topic version (optional)",id:"tearsheet-multi-form-story-text-input-multi-form-1-input-3",value:_,placeholder:"Enter topic version",onChange:l=>k(l.target.value)}),a&&e.jsx(he,{kind:"error",title:"Error",subtitle:"Resolve errors to continue",onClose:()=>w(!a)}),e.jsx(be,{className:`${M}__error--toggle`,id:"simulated-error-toggle",size:"sm",labelText:"Simulate error",onToggle:()=>w(!a),toggled:a})]})}),e.jsx(f,{title:"Location",subtitle:"Custom form subtitle",fieldsetLegendText:"",description:"Custom form description (see storybook implementation for new custom form capability)",children:e.jsx(v,{xlg:8,lg:8,md:8,sm:8,children:e.jsx(P,{value:q,onChange:l=>$(l.target.value),id:"custom-form-input",labelText:"Location",placeholder:"Enter location"})})}),e.jsx(f,{title:"Partitions",subtitle:`One or more partitions make up a topic. A partition is an ordered
          list of messages.`,description:`Partitions are distributed across the brokers in order to increase
          the scalability of your topic. You can also use them to distribute
          messages across the members of a consumer group.`,fieldsetLegendText:"Partition information",children:e.jsx(v,{xlg:3,lg:3,md:8,sm:4,children:e.jsx(fe,{id:"carbon-number",min:1,max:100,value:A,label:"Partitions",helperText:"1 partition is sufficient for getting started but, production systems often have more.",invalidText:"Max partitions is 100, min is 1",onChange:l=>I(l.imaginaryTarget.value)})})}),e.jsx(f,{title:"Message retention",subtitle:"This is how long messages are retained before they are deleted.",description:`If your messages are not read by a consumer within this time, they
          will be missed.`,fieldsetLegendText:"Message retention scheduling",children:e.jsx(v,{xlg:8,lg:8,md:8,sm:8,children:e.jsxs(ge,{legendText:"Message retention",name:"radio-button-group",defaultSelected:L,onChange:l=>u(l),orientation:"vertical",children:[e.jsx(B,{labelText:"A day",value:"one-day",id:"one-day"}),e.jsx(B,{labelText:"A week",value:"one-week",id:"one-week"}),e.jsx(B,{labelText:"A month",value:"one-month",id:"one-month"})]})})})]})]})};Q.__docgenInfo={description:"",methods:[],displayName:"MultiFormEditTearsheet"};const zt={title:"IBM Products/Patterns/Edit and update/EditTearsheet",component:T,tags:["autodocs"],argTypes:{description:{control:{type:"text"}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},open:{control:{disable:!0}},...ye()},parameters:{styles:_e,docs:{page:K}}},Ee={title:"Edit topic",description:"Specify details for the topic you want to update",submitButtonText:"Save",cancelButtonText:"Cancel",className:"test-class-name",label:"",influencerWidth:"narrow"},U=Q.bind({});U.storyName="Edit tearsheet";U.args={...Ee};const Mt=["multiFormEditTearsheet"];export{Mt as __namedExportsOrder,zt as default,U as multiFormEditTearsheet};
