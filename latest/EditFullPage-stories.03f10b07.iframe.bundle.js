"use strict";(self.webpackChunk_carbon_ibm_cloud_cognitive_core=self.webpackChunk_carbon_ibm_cloud_cognitive_core||[]).push([[1266],{"../ibm-products/src/components/EditFullPage/EditFullPage.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>EditFullPage_stories,editFullPage:()=>editFullPage,editFullPageWithSections:()=>editFullPageWithSections});var react=__webpack_require__("../../node_modules/react/index.js"),settings=__webpack_require__("../ibm-products/src/settings.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs"),CreateFullPage=__webpack_require__("../ibm-products/src/components/CreateFullPage/CreateFullPage.tsx"),CreateFullPageStep=__webpack_require__("../ibm-products/src/components/CreateFullPage/CreateFullPageStep.js"),prop_types=__webpack_require__("../../node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),classnames=__webpack_require__("../../node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),devtools=__webpack_require__("../ibm-products/src/global/js/utils/devtools.js"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var _excluded=["className","children"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!==_typeof(input)||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!==_typeof(res))return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"===_typeof(key)?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var blockClass="".concat(settings.K.prefix,"--edit-full-page"),EditFullPage=react.forwardRef((function(_ref,ref){var className=_ref.className,children=_ref.children,rest=_objectWithoutProperties(_ref,_excluded);return(0,jsx_runtime.jsx)("div",_objectSpread(_objectSpread(_objectSpread({},rest),{},{className:classnames_default()(blockClass,className,{}),ref,role:"main"},(0,devtools.n8)("EditFullPage")),{},{children}))}));(EditFullPage=settings.K.checkComponentEnabled(EditFullPage,"EditFullPage")).displayName="EditFullPage",EditFullPage.propTypes={children:prop_types_default().node.isRequired,className:prop_types_default().string},EditFullPage.__docgenInfo={description:"Use when settings on a page need to always be shown in edit mode, or when the context of the page is needed to make several changes.\nSee usage guidance for further details.",methods:[],displayName:"EditFullPage",props:{className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the EditFullPage.",type:{name:"node"}}}};var _storybook_styles=__webpack_require__("../ibm-products/src/components/CreateFullPage/_storybook-styles.scss"),es=__webpack_require__("../../node_modules/@carbon/react/es/index.js"),StoryDocsPage=__webpack_require__("../ibm-products/src/global/js/utils/StoryDocsPage.js"),DocsPage=function DocsPage(){return(0,jsx_runtime.jsx)(StoryDocsPage.r,{altGuidelinesHref:"https://pages.github.ibm.com/cdai-design/pal/patterns/edit/usage#full-page-edit",blocks:[{description:"There are **2** components that make up a Create Full Page component, which can\nbe used in unison to create the desired look, or flow. Please note, to utilize\nthe Create Full Page component, you'll need to have a minimum of two steps. If\nyou are looking for a one step creation flow, consider Create Tearsheet, Create\nSide Panel, or Create Modal."},{story:editFullPage,description:"This is used when you have one section per step. This can be created by passing\nin the overall `<CreateFullPage />` component and the `<CreateFullPageStep />`\ncomponent with form items as children:",source:{code:'<CreateFullPage {...props}>\n      <CreateFullPageStep\n          title="Required title"\n          subtitle="Optional subtitle"\n          description="Optional description"\n          onNext={() => {\'Optional function\'}}\n          >\n          <Row>\n            <Column xlg={5} lg={5} md={4} sm={4}>\n              <TextInput\n                id="test-1"\n                invalidText="A valid value is required"\n                labelText="Topic name"\n                placeholder="Enter topic name"\n              />\n            </Column>\n          </Row>\n      </CreateFullPageStep>\n    </CreateFullPage>'}},{story:editFullPageWithSections,description:"This is used when you have several sections per step. This can be created by\npassing in the overall `<CreateFullPage />` component and the\n`<CreateFullPageStep />` component for the first `section`. All additional\n`sections` must be passed in as children, as shown below:",source:{code:'<CreateFullPageStep\n    title="Required title"\n    subtitle="Optional subtitle"\n    description="Optional description"\n    onNext={() => {\'Optional function\'}}\n    >\n    <Row>\n      <Column xlg={5} lg={5} md={4} sm={4}>\n        <fieldset className={`#{$pkg-prefix}--create-full-page__step-fieldset`}>\n          <TextInput\n            id="test-1"\n            invalidText="A valid value is required"\n            labelText="Topic name"\n            placeholder="Enter topic name"\n          />\n        </fieldset>\n      </Column>\n    </Row>\n    <span className={`#{$pkg-prefix}--create-full-page__section-divider`} />\n    <h5 className={`#{$pkg-prefix}--create-full-page__step-title`}>Required title</h5>\n    <h6 className={`#{$pkg-prefix}--create-full-page__step-subtitle`}>\n      Optional subtitle\n    </h6>\n    <p className={`#{$pkg-prefix}--create-full-page__step-description`}>\n      Optional description\n    </p>\n    <Row>\n      <Column xlg={5} lg={5} md={4} sm={4}>\n        <fieldset className={`#{$pkg-prefix}--create-full-page__step-fieldset`}>\n          <TextInput\n            id="test-2"\n            invalidText="A valid value is required"\n            labelText="Topic name"\n            placeholder="Enter topic name"\n          />\n        </fieldset>\n      </Column>\n    </Row>\n</CreateFullPageStep>'}},{title:"Using custom components",description:"It is possible to use custom components that return `CreateFullPageStep`s in\norder to help reduce the amount of logic in the component that contains the main\n`CreateFullPage`. _It is required that each child of the `CreateFullPage` either\nbe a custom step or a `CreateFullPageStep`_. An example of this could look like\nthe following:",source:{code:'const CreateStepCustom = ({ subtitle, ...rest }) => {\n  return (\n    <CreateFullPageStep\n      {...rest}\n      subtitle={subtitle}\n      title="Step 1"\n      onNext={() => console.log(\'optional validation check\')}\n      onMount={() => console.log(\'optional onMount fn\')}\n      disableSubmit={false}\n    >\n      step content here\n    </CreateFullPageStep>\n  );\n};\n\nconst CreateComponent = () => {\n  return (\n    <CreateFullPage {...createFullPageProps}>\n      <CreateStepCustom subtitle="Custom step subtitle" />\n      <CreateFullPageStep\n        title="Topic name"\n        fieldsetLegendText="Topic information"\n        disableSubmit={!value}\n        subtitle="This is the unique name used to recognize your topic"\n        description="It will also be used by your producers and consumers as part of the\n        connection information, so make it something easy to recognize."\n      >\n        Content for second step\n      </CreateFullPageStep>\n    </CreateFullPage>\n  );\n};'}},{title:"Using dynamic steps",description:"The use of dynamic steps can be utilized in a scenario when the user makes a\ncertain selection on one step that effects which steps will follow it, this is\ncontrolled via the `includeStep` prop. See abbreviated example below:",source:{code:"import { useState } from 'react';\n\nconst CreateFlow = () => {\n  const [shouldIncludeAdditionalStep, setShouldIncludeAdditionalStep] =\n    useState(false);\n  return (\n    <CreateFullPage {...createFullPageProps}>\n      <CreateFullPageStep {...step1Props}>\n        Step 1 content\n        <Checkbox\n          labelText={`Include additional step`}\n          id=\"include-additional-step-checkbox\"\n          onChange={(value) => setShouldIncludeAdditionalStep(value)}\n          checked={shouldIncludeAdditionalStep}\n        />\n      </CreateFullPageStep>\n      <CreateFullPageStep\n        {...step2Props}\n        includeStep={shouldIncludeAdditionalStep}\n      >\n        Dynamic step content\n      </CreateFullPageStep>\n      <CreateFullPageStep {...step3Props}>\n        Final step content\n      </CreateFullPageStep>\n    </CreateFullPage>\n  );\n};"}},{title:"Class names",description:"Additionally, to get the preferred styling when including your own children as\nsections, you can utilize the below included class names.\n\n| Class name                                           | Element     | Features                                                   |\n| ---------------------------------------------------- | ----------- | ---------------------------------------------------------- |\n| `#{$pkg-prefix}--create-full-page__step-title`       | title       | `productive-heading-04` & `margin-bottom` of `$spacing-05` |\n| `#{$pkg-prefix}--create-full-page__step-subtitle`    | subtitle    | `productive-heading-01` & `margin-bottom` of `$spacing-03` |\n| `#{$pkg-prefix}--create-full-page__step-description` | description | `body-long-01` & `margin-bottom` of `$spacing-06`          |\n| `#{$pkg-prefix}--create-full-page__step-fieldset`    | fieldset    | `margin-bottom` of `$spacing-05` to all children elements  |\n| `#{$pkg-prefix}--create-full-page__section-divider`  | divider     | Includes a `1px` divider line inside the `main` content    |\n"}]})};DocsPage.displayName="DocsPage";const EditFullPage_docs_page=DocsPage;DocsPage.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};var _div,_CreateFullPageStep,_Column,_CreateFullPageStep2,_div2,_p,_NumberInput,_NumberInput2,_CreateFullPageStep3;function EditFullPage_stories_typeof(o){return EditFullPage_stories_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},EditFullPage_stories_typeof(o)}function EditFullPage_stories_ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function EditFullPage_stories_objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?EditFullPage_stories_ownKeys(Object(t),!0).forEach((function(r){EditFullPage_stories_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):EditFullPage_stories_ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function EditFullPage_stories_defineProperty(obj,key,value){return(key=function EditFullPage_stories_toPropertyKey(t){var i=function EditFullPage_stories_toPrimitive(t,r){if("object"!=EditFullPage_stories_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=EditFullPage_stories_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==EditFullPage_stories_typeof(i)?i:String(i)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _objectDestructuringEmpty(obj){if(null==obj)throw new TypeError("Cannot destructure "+obj)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var storyClass="create-full-page-stories",EditFullPage_stories_blockClass="".concat(settings.K.prefix,"--create-full-page");const EditFullPage_stories={title:"IBM Products/Patterns/Edit and update/EditFullPage",component:EditFullPage,tags:["autodocs"],parameters:{storySource:{source:'function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nvar _div, _CreateFullPageStep, _Column, _CreateFullPageStep2, _div2, _p, _NumberInput, _NumberInput2, _CreateFullPageStep3;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure " + obj); }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * Copyright IBM Corp. 2021, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useState } from \'react\';\nimport { carbon } from \'../../settings\';\nimport { action } from \'@storybook/addon-actions\';\nimport { CreateFullPage } from \'../CreateFullPage\';\nimport { CreateFullPageStep } from \'../CreateFullPage/CreateFullPageStep\';\nimport { pkg } from \'../../settings\';\nimport { EditFullPage } from \'.\';\nimport styles from \'../CreateFullPage/_storybook-styles.scss\';\nvar storyClass = \'create-full-page-stories\';\nvar blockClass = "".concat(pkg.prefix, "--create-full-page");\nimport { Checkbox, TextInput, NumberInput, InlineNotification, Toggle, RadioButtonGroup, RadioButton, FormGroup, Column, Grid, DefinitionTooltip } from \'@carbon/react\';\nimport DocsPage from \'./EditFullPage.docs-page\';\nexport default {\n  title: \'IBM Products/Patterns/Edit and update/EditFullPage\',\n  component: EditFullPage,\n  tags: [\'autodocs\'],\n  parameters: {\n    styles: styles,\n    layout: \'fullscreen\',\n    docs: {\n      page: DocsPage\n    },\n    controls: {\n      sort: \'requiredFirst\'\n    }\n  },\n  decorators: [function (story) {\n    return /*#__PURE__*/React.createElement("div", {\n      className: "".concat(storyClass, "__viewport")\n    }, story());\n  }]\n};\nvar defaultFullPageProps = {\n  nextButtonText: \'Next\',\n  backButtonText: \'Back\',\n  cancelButtonText: \'Cancel changes\',\n  submitButtonText: \'Save changes\',\n  modalTitle: \'Are you sure you want to cancel?\',\n  modalDescription: "If you cancel, the information you have entered won\'t be saved.",\n  modalDangerButtonText: \'Cancel partition\',\n  modalSecondaryButtonText: \'Return to form\',\n  onRequestSubmit: action(\'Submit handler called\'),\n  onClose: action(\'Close handler called\')\n};\nvar Template = function Template(_ref) {\n  var args = _extends({}, (_objectDestructuringEmpty(_ref), _ref));\n  var _useState = useState(\'Enter topic name\'),\n    _useState2 = _slicedToArray(_useState, 2),\n    textInput = _useState2[0],\n    setTextInput = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    hasSubmitError = _useState4[0],\n    setHasSubmitError = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    shouldReject = _useState6[0],\n    setShouldReject = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isInvalid = _useState8[0],\n    setIsInvalid = _useState8[1];\n  var _useState9 = useState(750),\n    _useState10 = _slicedToArray(_useState9, 1),\n    simulatedDelay = _useState10[0];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    shouldIncludeAdditionalStep = _useState12[0],\n    setShouldIncludeAdditionalStep = _useState12[1];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("style", null, ".".concat(carbon.prefix, "--modal { opacity: 0; }"), ";"), /*#__PURE__*/React.createElement(CreateFullPage, args, /*#__PURE__*/React.createElement(CreateFullPageStep, {\n    className: "".concat(storyClass, "__step-fieldset--no-label"),\n    title: "Partition",\n    subtitle: "One or more partitions make up a topic. A partition is an ordered list of messages.",\n    description: "Partitions are distributed across the brokers in order to increase the scalability of your topic. You can also use them to distribute messages across the members of a consumer group.",\n    onNext: function onNext() {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          // Example usage of how to prevent the next step if some kind\n          // of error occurred during the `onNext` handler.\n          if (shouldReject) {\n            setHasSubmitError(true);\n            reject();\n          }\n          setIsInvalid(false);\n          resolve();\n        }, simulatedDelay);\n      });\n    },\n    disableSubmit: !textInput\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    id: "test-1",\n    invalidText: "A valid value is required",\n    labelText: "Topic name",\n    placeholder: "Enter topic name",\n    value: textInput,\n    onChange: function onChange(e) {\n      setTextInput(e.target.value);\n      setIsInvalid(false);\n    },\n    onBlur: function onBlur() {\n      textInput.length === 0 && setIsInvalid(true);\n    },\n    invalid: isInvalid\n  }), hasSubmitError && /*#__PURE__*/React.createElement(InlineNotification, {\n    lowContrast: true,\n    kind: "error",\n    title: "Error",\n    subtitle: "Resolve errors to continue",\n    onClose: function onClose() {\n      return setHasSubmitError(false);\n    }\n  }), /*#__PURE__*/React.createElement("div", null, _div || (_div = /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DefinitionTooltip, {\n    className: "".concat(storyClass, "__error--text"),\n    size: "sm",\n    definition: \'Once toggled on, an inline error notification will appear upon clicking next. This is an example usage of how to prevent the next step if some kind of error occurred during the `onNext` handler.\'\n  }, "Simulate error"))), /*#__PURE__*/React.createElement(Toggle, {\n    id: "simulated-error-toggle",\n    size: "sm",\n    onToggle: function onToggle(event) {\n      return setShouldReject(event);\n    }\n  })), /*#__PURE__*/React.createElement(Checkbox, {\n    labelText: "Include additional step",\n    id: "include-additional-step-checkbox",\n    onChange: function onChange(value) {\n      return setShouldIncludeAdditionalStep(value);\n    },\n    checked: shouldIncludeAdditionalStep\n  })))), /*#__PURE__*/React.createElement(CreateFullPageStep, {\n    title: "Dynamic step",\n    description: "Example dynamic step",\n    includeStep: shouldIncludeAdditionalStep\n  }), _CreateFullPageStep || (_CreateFullPageStep = /*#__PURE__*/React.createElement(CreateFullPageStep, {\n    title: "Empty",\n    secondaryLabel: "Optional",\n    description: "Empty step for demonstration purposes"\n  })), /*#__PURE__*/React.createElement(CreateFullPageStep, {\n    className: "".concat(storyClass, "__step-fieldset--no-label"),\n    title: "Core configuration",\n    description: "Here is an example description for the \'Core configuration\' step.",\n    secondaryLabel: "Optional"\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    id: "test-2",\n    invalidText: "A valid value is required",\n    labelText: "Topic name (optional)",\n    placeholder: "Enter topic name",\n    value: textInput\n  })), _Column || (_Column = /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement(NumberInput, {\n    id: "test-3",\n    invalidText: "Number is not valid",\n    label: "Label (optional)",\n    max: 100,\n    min: 0,\n    step: 10,\n    value: 0,\n    iconDescription: "Number input"\n  }), /*#__PURE__*/React.createElement(NumberInput, {\n    id: "test-4",\n    invalidText: "Number is not valid",\n    label: "Label (optional)",\n    max: 100,\n    min: 0,\n    step: 10,\n    value: 0,\n    iconDescription: "Number input"\n  }))), /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    id: "test-5",\n    invalidText: "A valid value is required",\n    labelText: "Minimum in-sync replicas (optional)",\n    placeholder: "Enter topic name",\n    value: textInput\n  })))))), _CreateFullPageStep2 || (_CreateFullPageStep2 = /*#__PURE__*/React.createElement(CreateFullPageStep, {\n    title: "Message retention",\n    subtitle: "This is how many copies of a topic will be made for high availability",\n    description: "The partitions of each topic can be replicated across a configurable number of brokers"\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement(RadioButtonGroup, {\n    defaultSelected: "standard",\n    legend: "Group Legend",\n    name: "radio-button-group",\n    valueSelected: "standard",\n    orientation: "vertical"\n  }, /*#__PURE__*/React.createElement(RadioButton, {\n    id: "radio-1",\n    labelText: "Replication factor: 1",\n    value: "standard"\n  }), /*#__PURE__*/React.createElement(RadioButton, {\n    id: "radio-2",\n    labelText: "Replication factor: 2",\n    value: "default-selected"\n  }), /*#__PURE__*/React.createElement(RadioButton, {\n    id: "radio-3",\n    labelText: "Replication factor: 3",\n    value: "disabled"\n  }))))))));\n};\nvar TemplateWithSections = function TemplateWithSections(_ref2) {\n  var args = _extends({}, (_objectDestructuringEmpty(_ref2), _ref2));\n  var _useState13 = useState(\'Enter topic name\'),\n    _useState14 = _slicedToArray(_useState13, 2),\n    textInput = _useState14[0],\n    setTextInput = _useState14[1];\n  var _useState15 = useState(false),\n    _useState16 = _slicedToArray(_useState15, 2),\n    hasSubmitError = _useState16[0],\n    setHasSubmitError = _useState16[1];\n  var _useState17 = useState(false),\n    _useState18 = _slicedToArray(_useState17, 2),\n    shouldReject = _useState18[0],\n    setShouldReject = _useState18[1];\n  var _useState19 = useState(false),\n    _useState20 = _slicedToArray(_useState19, 2),\n    isInvalid = _useState20[0],\n    setIsInvalid = _useState20[1];\n  var _useState21 = useState(750),\n    _useState22 = _slicedToArray(_useState21, 1),\n    simulatedDelay = _useState22[0];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("style", null, ".".concat(carbon.prefix, "--modal { opacity: 0; }"), ";"), /*#__PURE__*/React.createElement(CreateFullPage, _extends({\n    className: "".concat(blockClass)\n  }, args), /*#__PURE__*/React.createElement(CreateFullPageStep, {\n    title: "Partition",\n    subtitle: "One or more partitions make up a topic. A partition is an ordered list of messages.",\n    description: "Partitions are distributed across the brokers in order to increase the scalability of your topic. You can also use them to distribute messages across the members of a consumer group.",\n    onNext: function onNext() {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          // Example usage of how to prevent the next step if some kind\n          // of error occurred during the `onNext` handler.\n          if (shouldReject) {\n            setHasSubmitError(true);\n            reject();\n          }\n          setIsInvalid(false);\n          resolve();\n        }, simulatedDelay);\n      });\n    },\n    disableSubmit: !textInput\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: "".concat(blockClass, "__step-fieldset ").concat(storyClass, "__step-fieldset--label"),\n    legendText: "Partition"\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    id: "test-6",\n    invalidText: "A valid value is required",\n    labelText: "Topic name",\n    placeholder: "Enter topic name",\n    value: textInput,\n    onChange: function onChange(e) {\n      setTextInput(e.target.value);\n      setIsInvalid(false);\n    },\n    onBlur: function onBlur() {\n      textInput.length === 0 && setIsInvalid(true);\n    },\n    invalid: isInvalid\n  }), hasSubmitError && /*#__PURE__*/React.createElement(InlineNotification, {\n    lowContrast: true,\n    kind: "error",\n    title: "Error",\n    subtitle: "Resolve errors to continue",\n    onClose: function onClose() {\n      return setHasSubmitError(false);\n    }\n  }), /*#__PURE__*/React.createElement("div", null, _div2 || (_div2 = /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DefinitionTooltip, {\n    className: "".concat(storyClass, "__error--text"),\n    size: "sm",\n    definition: \'Once toggled on, an inline error notification will appear upon clicking next. This is an example usage of how to prevent the next step if some kind of error occurred during the `onNext` handler.\'\n  }, "Simulate error"))), /*#__PURE__*/React.createElement(Toggle, {\n    id: "simulated-error-toggle",\n    size: "sm",\n    onToggle: function onToggle(event) {\n      return setShouldReject(event);\n    }\n  }))))), /*#__PURE__*/React.createElement("span", {\n    className: "".concat(blockClass, "__section-divider")\n  }), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement("h5", {\n    className: "".concat(blockClass, "__step-title")\n  }, "Core configuration"), /*#__PURE__*/React.createElement("h6", {\n    className: "".concat(blockClass, "__step-subtitle")\n  }, "This is how long messages are retained before they are deleted."), /*#__PURE__*/React.createElement(FormGroup, {\n    className: "".concat(blockClass, "__step-fieldset ").concat(storyClass, "__step-fieldset--label"),\n    legendText: "Core configuration"\n  }, _p || (_p = /*#__PURE__*/React.createElement("p", null, "If your messages are not read by a consumer within this time, they will be missed.")), /*#__PURE__*/React.createElement(TextInput, {\n    id: "test-7",\n    invalidText: "A valid value is required",\n    labelText: "Topic name (optional)",\n    placeholder: "Enter topic name",\n    value: textInput\n  }), _NumberInput || (_NumberInput = /*#__PURE__*/React.createElement(NumberInput, {\n    id: "test-8",\n    invalidText: "Number is not valid",\n    label: "Label (optional)",\n    max: 100,\n    min: 0,\n    step: 10,\n    value: 0\n  })), _NumberInput2 || (_NumberInput2 = /*#__PURE__*/React.createElement(NumberInput, {\n    id: "test-9",\n    invalidText: "Number is not valid",\n    label: "Label (optional)",\n    max: 100,\n    min: 0,\n    step: 10,\n    value: 0\n  })), /*#__PURE__*/React.createElement(TextInput, {\n    id: "test-10",\n    invalidText: "A valid value is required",\n    labelText: "Minimum in-sync replicas (optional)",\n    placeholder: "Enter topic name",\n    value: textInput\n  }))))), _CreateFullPageStep3 || (_CreateFullPageStep3 = /*#__PURE__*/React.createElement(CreateFullPageStep, {\n    title: "Message retention",\n    subtitle: "This is how many copies of a topic will be made for high availability",\n    description: "The partitions of each topic can be replicated across a configurable number of brokers."\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {\n    xlg: 5,\n    lg: 5,\n    md: 4,\n    sm: 4\n  }, /*#__PURE__*/React.createElement(RadioButtonGroup, {\n    defaultSelected: "standard",\n    legend: "Group Legend",\n    name: "radio-button-group",\n    valueSelected: "standard",\n    orientation: "vertical"\n  }, /*#__PURE__*/React.createElement(RadioButton, {\n    id: "radio-4",\n    labelText: "Replication factor: 1",\n    value: "standard"\n  }), /*#__PURE__*/React.createElement(RadioButton, {\n    id: "radio-5",\n    labelText: "Replication factor: 2",\n    value: "default-selected"\n  }), /*#__PURE__*/React.createElement(RadioButton, {\n    id: "radio-6",\n    labelText: "Replication factor: 3",\n    value: "disabled"\n  }))))))));\n};\nexport var editFullPage = Template.bind({});\neditFullPage.args = _objectSpread({}, defaultFullPageProps);\nexport var editFullPageWithSections = TemplateWithSections.bind({});\neditFullPageWithSections.args = _objectSpread({}, defaultFullPageProps);',locationsMap:{"edit-full-page":{startLoc:{col:15,line:66},endLoc:{col:1,line:246},startBody:{col:15,line:66},endBody:{col:1,line:246}},"edit-full-page-with-sections":{startLoc:{col:27,line:247},endLoc:{col:1,line:399},startBody:{col:27,line:247},endBody:{col:1,line:399}}}},styles:_storybook_styles.Z,layout:"fullscreen",docs:{page:EditFullPage_docs_page},controls:{sort:"requiredFirst"}},decorators:[function(story){return react.createElement("div",{className:"".concat(storyClass,"__viewport")},story())}]};var defaultFullPageProps={nextButtonText:"Next",backButtonText:"Back",cancelButtonText:"Cancel changes",submitButtonText:"Save changes",modalTitle:"Are you sure you want to cancel?",modalDescription:"If you cancel, the information you have entered won't be saved.",modalDangerButtonText:"Cancel partition",modalSecondaryButtonText:"Return to form",onRequestSubmit:(0,dist.aD)("Submit handler called"),onClose:(0,dist.aD)("Close handler called")},editFullPage=function Template(_ref){var args=_extends({},(_objectDestructuringEmpty(_ref),_ref)),_useState2=_slicedToArray((0,react.useState)("Enter topic name"),2),textInput=_useState2[0],setTextInput=_useState2[1],_useState4=_slicedToArray((0,react.useState)(!1),2),hasSubmitError=_useState4[0],setHasSubmitError=_useState4[1],_useState6=_slicedToArray((0,react.useState)(!1),2),shouldReject=_useState6[0],setShouldReject=_useState6[1],_useState8=_slicedToArray((0,react.useState)(!1),2),isInvalid=_useState8[0],setIsInvalid=_useState8[1],simulatedDelay=_slicedToArray((0,react.useState)(750),1)[0],_useState12=_slicedToArray((0,react.useState)(!1),2),shouldIncludeAdditionalStep=_useState12[0],setShouldIncludeAdditionalStep=_useState12[1];return react.createElement(react.Fragment,null,react.createElement("style",null,".".concat(settings.u.prefix,"--modal { opacity: 0; }"),";"),react.createElement(CreateFullPage.Tw,args,react.createElement(CreateFullPageStep.e,{className:"".concat(storyClass,"__step-fieldset--no-label"),title:"Partition",subtitle:"One or more partitions make up a topic. A partition is an ordered list of messages.",description:"Partitions are distributed across the brokers in order to increase the scalability of your topic. You can also use them to distribute messages across the members of a consumer group.",onNext:function onNext(){return new Promise((function(resolve,reject){setTimeout((function(){shouldReject&&(setHasSubmitError(!0),reject()),setIsInvalid(!1),resolve()}),simulatedDelay)}))},disableSubmit:!textInput},react.createElement(es.rjZ,null,react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement(es.oil,{id:"test-1",invalidText:"A valid value is required",labelText:"Topic name",placeholder:"Enter topic name",value:textInput,onChange:function onChange(e){setTextInput(e.target.value),setIsInvalid(!1)},onBlur:function onBlur(){0===textInput.length&&setIsInvalid(!0)},invalid:isInvalid}),hasSubmitError&&react.createElement(es.K0D,{lowContrast:!0,kind:"error",title:"Error",subtitle:"Resolve errors to continue",onClose:function onClose(){return setHasSubmitError(!1)}}),react.createElement("div",null,_div||(_div=react.createElement("div",null,react.createElement(es.IiX,{className:"".concat(storyClass,"__error--text"),size:"sm",definition:"Once toggled on, an inline error notification will appear upon clicking next. This is an example usage of how to prevent the next step if some kind of error occurred during the `onNext` handler."},"Simulate error"))),react.createElement(es.ZDl,{id:"simulated-error-toggle",size:"sm",onToggle:function onToggle(event){return setShouldReject(event)}})),react.createElement(es.XZJ,{labelText:"Include additional step",id:"include-additional-step-checkbox",onChange:function onChange(value){return setShouldIncludeAdditionalStep(value)},checked:shouldIncludeAdditionalStep})))),react.createElement(CreateFullPageStep.e,{title:"Dynamic step",description:"Example dynamic step",includeStep:shouldIncludeAdditionalStep}),_CreateFullPageStep||(_CreateFullPageStep=react.createElement(CreateFullPageStep.e,{title:"Empty",secondaryLabel:"Optional",description:"Empty step for demonstration purposes"})),react.createElement(CreateFullPageStep.e,{className:"".concat(storyClass,"__step-fieldset--no-label"),title:"Core configuration",description:"Here is an example description for the 'Core configuration' step.",secondaryLabel:"Optional"},react.createElement(es.rjZ,null,react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement(es.rjZ,null,react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement(es.oil,{id:"test-2",invalidText:"A valid value is required",labelText:"Topic name (optional)",placeholder:"Enter topic name",value:textInput})),_Column||(_Column=react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement(es.Y2U,{id:"test-3",invalidText:"Number is not valid",label:"Label (optional)",max:100,min:0,step:10,value:0,iconDescription:"Number input"}),react.createElement(es.Y2U,{id:"test-4",invalidText:"Number is not valid",label:"Label (optional)",max:100,min:0,step:10,value:0,iconDescription:"Number input"}))),react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement(es.oil,{id:"test-5",invalidText:"A valid value is required",labelText:"Minimum in-sync replicas (optional)",placeholder:"Enter topic name",value:textInput})))))),_CreateFullPageStep2||(_CreateFullPageStep2=react.createElement(CreateFullPageStep.e,{title:"Message retention",subtitle:"This is how many copies of a topic will be made for high availability",description:"The partitions of each topic can be replicated across a configurable number of brokers"},react.createElement(es.rjZ,null,react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement(es.SYO,{defaultSelected:"standard",legend:"Group Legend",name:"radio-button-group",valueSelected:"standard",orientation:"vertical"},react.createElement(es.EUY,{id:"radio-1",labelText:"Replication factor: 1",value:"standard"}),react.createElement(es.EUY,{id:"radio-2",labelText:"Replication factor: 2",value:"default-selected"}),react.createElement(es.EUY,{id:"radio-3",labelText:"Replication factor: 3",value:"disabled"}))))))))}.bind({});editFullPage.args=EditFullPage_stories_objectSpread({},defaultFullPageProps);var editFullPageWithSections=function TemplateWithSections(_ref2){var args=_extends({},(_objectDestructuringEmpty(_ref2),_ref2)),_useState14=_slicedToArray((0,react.useState)("Enter topic name"),2),textInput=_useState14[0],setTextInput=_useState14[1],_useState16=_slicedToArray((0,react.useState)(!1),2),hasSubmitError=_useState16[0],setHasSubmitError=_useState16[1],_useState18=_slicedToArray((0,react.useState)(!1),2),shouldReject=_useState18[0],setShouldReject=_useState18[1],_useState20=_slicedToArray((0,react.useState)(!1),2),isInvalid=_useState20[0],setIsInvalid=_useState20[1],simulatedDelay=_slicedToArray((0,react.useState)(750),1)[0];return react.createElement(react.Fragment,null,react.createElement("style",null,".".concat(settings.u.prefix,"--modal { opacity: 0; }"),";"),react.createElement(CreateFullPage.Tw,_extends({className:"".concat(EditFullPage_stories_blockClass)},args),react.createElement(CreateFullPageStep.e,{title:"Partition",subtitle:"One or more partitions make up a topic. A partition is an ordered list of messages.",description:"Partitions are distributed across the brokers in order to increase the scalability of your topic. You can also use them to distribute messages across the members of a consumer group.",onNext:function onNext(){return new Promise((function(resolve,reject){setTimeout((function(){shouldReject&&(setHasSubmitError(!0),reject()),setIsInvalid(!1),resolve()}),simulatedDelay)}))},disableSubmit:!textInput},react.createElement(es.rjZ,null,react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement(es.cwH,{className:"".concat(EditFullPage_stories_blockClass,"__step-fieldset ").concat(storyClass,"__step-fieldset--label"),legendText:"Partition"},react.createElement(es.oil,{id:"test-6",invalidText:"A valid value is required",labelText:"Topic name",placeholder:"Enter topic name",value:textInput,onChange:function onChange(e){setTextInput(e.target.value),setIsInvalid(!1)},onBlur:function onBlur(){0===textInput.length&&setIsInvalid(!0)},invalid:isInvalid}),hasSubmitError&&react.createElement(es.K0D,{lowContrast:!0,kind:"error",title:"Error",subtitle:"Resolve errors to continue",onClose:function onClose(){return setHasSubmitError(!1)}}),react.createElement("div",null,_div2||(_div2=react.createElement("div",null,react.createElement(es.IiX,{className:"".concat(storyClass,"__error--text"),size:"sm",definition:"Once toggled on, an inline error notification will appear upon clicking next. This is an example usage of how to prevent the next step if some kind of error occurred during the `onNext` handler."},"Simulate error"))),react.createElement(es.ZDl,{id:"simulated-error-toggle",size:"sm",onToggle:function onToggle(event){return setShouldReject(event)}}))))),react.createElement("span",{className:"".concat(EditFullPage_stories_blockClass,"__section-divider")}),react.createElement(es.rjZ,null,react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement("h5",{className:"".concat(EditFullPage_stories_blockClass,"__step-title")},"Core configuration"),react.createElement("h6",{className:"".concat(EditFullPage_stories_blockClass,"__step-subtitle")},"This is how long messages are retained before they are deleted."),react.createElement(es.cwH,{className:"".concat(EditFullPage_stories_blockClass,"__step-fieldset ").concat(storyClass,"__step-fieldset--label"),legendText:"Core configuration"},_p||(_p=react.createElement("p",null,"If your messages are not read by a consumer within this time, they will be missed.")),react.createElement(es.oil,{id:"test-7",invalidText:"A valid value is required",labelText:"Topic name (optional)",placeholder:"Enter topic name",value:textInput}),_NumberInput||(_NumberInput=react.createElement(es.Y2U,{id:"test-8",invalidText:"Number is not valid",label:"Label (optional)",max:100,min:0,step:10,value:0})),_NumberInput2||(_NumberInput2=react.createElement(es.Y2U,{id:"test-9",invalidText:"Number is not valid",label:"Label (optional)",max:100,min:0,step:10,value:0})),react.createElement(es.oil,{id:"test-10",invalidText:"A valid value is required",labelText:"Minimum in-sync replicas (optional)",placeholder:"Enter topic name",value:textInput}))))),_CreateFullPageStep3||(_CreateFullPageStep3=react.createElement(CreateFullPageStep.e,{title:"Message retention",subtitle:"This is how many copies of a topic will be made for high availability",description:"The partitions of each topic can be replicated across a configurable number of brokers."},react.createElement(es.rjZ,null,react.createElement(es.sgG,{xlg:5,lg:5,md:4,sm:4},react.createElement(es.SYO,{defaultSelected:"standard",legend:"Group Legend",name:"radio-button-group",valueSelected:"standard",orientation:"vertical"},react.createElement(es.EUY,{id:"radio-4",labelText:"Replication factor: 1",value:"standard"}),react.createElement(es.EUY,{id:"radio-5",labelText:"Replication factor: 2",value:"default-selected"}),react.createElement(es.EUY,{id:"radio-6",labelText:"Replication factor: 3",value:"disabled"}))))))))}.bind({});editFullPageWithSections.args=EditFullPage_stories_objectSpread({},defaultFullPageProps),editFullPage.parameters={...editFullPage.parameters,docs:{...editFullPage.parameters?.docs,source:{originalSource:'({\n  ...args\n}) => {\n  const [textInput, setTextInput] = useState(\'Enter topic name\');\n  const [hasSubmitError, setHasSubmitError] = useState(false);\n  const [shouldReject, setShouldReject] = useState(false);\n  const [isInvalid, setIsInvalid] = useState(false);\n  const [simulatedDelay] = useState(750);\n  const [shouldIncludeAdditionalStep, setShouldIncludeAdditionalStep] = useState(false);\n  return <>\n      <style>{`.${carbon.prefix}--modal { opacity: 0; }`};</style>\n      <CreateFullPage {...args}>\n        <CreateFullPageStep className={`${storyClass}__step-fieldset--no-label`} title="Partition" subtitle="One or more partitions make up a topic. A partition is an ordered list\n        of messages." description="Partitions are distributed across the brokers in order to increase the\n        scalability of your topic. You can also use them to distribute\n        messages across the members of a consumer group." onNext={() => {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            // Example usage of how to prevent the next step if some kind\n            // of error occurred during the `onNext` handler.\n            if (shouldReject) {\n              setHasSubmitError(true);\n              reject();\n            }\n            setIsInvalid(false);\n            resolve();\n          }, simulatedDelay);\n        });\n      }} disableSubmit={!textInput}>\n          <Grid>\n            <Column xlg={5} lg={5} md={4} sm={4}>\n              <TextInput id="test-1" invalidText="A valid value is required" labelText="Topic name" placeholder="Enter topic name" value={textInput} onChange={e => {\n              setTextInput(e.target.value);\n              setIsInvalid(false);\n            }} onBlur={() => {\n              textInput.length === 0 && setIsInvalid(true);\n            }} invalid={isInvalid} />\n              {hasSubmitError && <InlineNotification lowContrast kind="error" title="Error" subtitle="Resolve errors to continue" onClose={() => setHasSubmitError(false)} />}\n              <div>\n                <div>\n                  <DefinitionTooltip className={`${storyClass}__error--text`} size="sm" definition={\'Once toggled on, an inline error notification will appear upon clicking next. This is an example usage of how to prevent the next step if some kind of error occurred during the `onNext` handler.\'}>\n                    Simulate error\n                  </DefinitionTooltip>\n                </div>\n                <Toggle id="simulated-error-toggle" size="sm" onToggle={event => setShouldReject(event)} />\n              </div>\n              <Checkbox labelText={`Include additional step`} id="include-additional-step-checkbox" onChange={value => setShouldIncludeAdditionalStep(value)} checked={shouldIncludeAdditionalStep} />\n            </Column>\n          </Grid>\n        </CreateFullPageStep>\n        <CreateFullPageStep title="Dynamic step" description="Example dynamic step" includeStep={shouldIncludeAdditionalStep} />\n        <CreateFullPageStep title="Empty" secondaryLabel="Optional" description="Empty step for demonstration purposes" />\n        <CreateFullPageStep className={`${storyClass}__step-fieldset--no-label`} title="Core configuration" description="Here is an example description for the \'Core configuration\' step." secondaryLabel="Optional">\n          <Grid>\n            <Column xlg={5} lg={5} md={4} sm={4}>\n              <Grid>\n                <Column xlg={5} lg={5} md={4} sm={4}>\n                  <TextInput id="test-2" invalidText="A valid value is required" labelText="Topic name (optional)" placeholder="Enter topic name" value={textInput} />\n                </Column>\n                <Column xlg={5} lg={5} md={4} sm={4}>\n                  <NumberInput id="test-3" invalidText="Number is not valid" label="Label (optional)" max={100} min={0} step={10} value={0} iconDescription="Number input" />\n                  <NumberInput id="test-4" invalidText="Number is not valid" label="Label (optional)" max={100} min={0} step={10} value={0} iconDescription="Number input" />\n                </Column>\n                <Column xlg={5} lg={5} md={4} sm={4}>\n                  <TextInput id="test-5" invalidText="A valid value is required" labelText="Minimum in-sync replicas (optional)" placeholder="Enter topic name" value={textInput} />\n                </Column>\n              </Grid>\n            </Column>\n          </Grid>\n        </CreateFullPageStep>\n        <CreateFullPageStep title="Message retention" subtitle="This is how many copies of a topic will be made for high availability" description="The partitions of each topic can be replicated across a configurable number of brokers">\n          <Grid>\n            <Column xlg={5} lg={5} md={4} sm={4}>\n              <RadioButtonGroup defaultSelected="standard" legend="Group Legend" name="radio-button-group" valueSelected="standard" orientation="vertical">\n                <RadioButton id="radio-1" labelText="Replication factor: 1" value="standard" />\n                <RadioButton id="radio-2" labelText="Replication factor: 2" value="default-selected" />\n                <RadioButton id="radio-3" labelText="Replication factor: 3" value="disabled" />\n              </RadioButtonGroup>\n            </Column>\n          </Grid>\n        </CreateFullPageStep>\n      </CreateFullPage>\n    </>;\n}',...editFullPage.parameters?.docs?.source}}},editFullPageWithSections.parameters={...editFullPageWithSections.parameters,docs:{...editFullPageWithSections.parameters?.docs,source:{originalSource:'({\n  ...args\n}) => {\n  const [textInput, setTextInput] = useState(\'Enter topic name\');\n  const [hasSubmitError, setHasSubmitError] = useState(false);\n  const [shouldReject, setShouldReject] = useState(false);\n  const [isInvalid, setIsInvalid] = useState(false);\n  const [simulatedDelay] = useState(750);\n  return <>\n      <style>{`.${carbon.prefix}--modal { opacity: 0; }`};</style>\n      <CreateFullPage className={`${blockClass}`} {...args}>\n        <CreateFullPageStep title="Partition" subtitle="One or more partitions make up a topic. A partition is an ordered list\n        of messages." description="Partitions are distributed across the brokers in order to increase the\n        scalability of your topic. You can also use them to distribute\n        messages across the members of a consumer group." onNext={() => {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            // Example usage of how to prevent the next step if some kind\n            // of error occurred during the `onNext` handler.\n            if (shouldReject) {\n              setHasSubmitError(true);\n              reject();\n            }\n            setIsInvalid(false);\n            resolve();\n          }, simulatedDelay);\n        });\n      }} disableSubmit={!textInput}>\n          <Grid>\n            <Column xlg={5} lg={5} md={4} sm={4}>\n              <FormGroup className={`${blockClass}__step-fieldset ${storyClass}__step-fieldset--label`} legendText="Partition">\n                <TextInput id="test-6" invalidText="A valid value is required" labelText="Topic name" placeholder="Enter topic name" value={textInput} onChange={e => {\n                setTextInput(e.target.value);\n                setIsInvalid(false);\n              }} onBlur={() => {\n                textInput.length === 0 && setIsInvalid(true);\n              }} invalid={isInvalid} />\n                {hasSubmitError && <InlineNotification lowContrast kind="error" title="Error" subtitle="Resolve errors to continue" onClose={() => setHasSubmitError(false)} />}\n                <div>\n                  <div>\n                    <DefinitionTooltip className={`${storyClass}__error--text`} size="sm" definition={\'Once toggled on, an inline error notification will appear upon clicking next. This is an example usage of how to prevent the next step if some kind of error occurred during the `onNext` handler.\'}>\n                      Simulate error\n                    </DefinitionTooltip>\n                  </div>\n                  <Toggle id="simulated-error-toggle" size="sm" onToggle={event => setShouldReject(event)} />\n                </div>\n              </FormGroup>\n            </Column>\n          </Grid>\n          <span className={`${blockClass}__section-divider`} />\n          <Grid>\n            <Column xlg={5} lg={5} md={4} sm={4}>\n              <h5 className={`${blockClass}__step-title`}>\n                Core configuration\n              </h5>\n              <h6 className={`${blockClass}__step-subtitle`}>\n                This is how long messages are retained before they are deleted.\n              </h6>\n              <FormGroup className={`${blockClass}__step-fieldset ${storyClass}__step-fieldset--label`} legendText="Core configuration">\n                <p>\n                  If your messages are not read by a consumer within this time,\n                  they will be missed.\n                </p>\n                <TextInput id="test-7" invalidText="A valid value is required" labelText="Topic name (optional)" placeholder="Enter topic name" value={textInput} />\n                <NumberInput id="test-8" invalidText="Number is not valid" label="Label (optional)" max={100} min={0} step={10} value={0} />\n                <NumberInput id="test-9" invalidText="Number is not valid" label="Label (optional)" max={100} min={0} step={10} value={0} />\n                <TextInput id="test-10" invalidText="A valid value is required" labelText="Minimum in-sync replicas (optional)" placeholder="Enter topic name" value={textInput} />\n              </FormGroup>\n            </Column>\n          </Grid>\n        </CreateFullPageStep>\n        <CreateFullPageStep title="Message retention" subtitle="This is how many copies of a topic will be made for high availability" description="The partitions of each topic can be replicated across a configurable number of brokers.">\n          <Grid>\n            <Column xlg={5} lg={5} md={4} sm={4}>\n              <RadioButtonGroup defaultSelected="standard" legend="Group Legend" name="radio-button-group" valueSelected="standard" orientation="vertical">\n                <RadioButton id="radio-4" labelText="Replication factor: 1" value="standard" />\n                <RadioButton id="radio-5" labelText="Replication factor: 2" value="default-selected" />\n                <RadioButton id="radio-6" labelText="Replication factor: 3" value="disabled" />\n              </RadioButtonGroup>\n            </Column>\n          </Grid>\n        </CreateFullPageStep>\n      </CreateFullPage>\n    </>;\n}',...editFullPageWithSections.parameters?.docs?.source}}};const __namedExportsOrder=["editFullPage","editFullPageWithSections"]}}]);