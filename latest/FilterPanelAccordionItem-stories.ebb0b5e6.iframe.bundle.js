"use strict";(self.webpackChunk_carbon_ibm_cloud_cognitive_core=self.webpackChunk_carbon_ibm_cloud_cognitive_core||[]).push([[2988],{"../ibm-products/src/components/FilterPanel/FilterPanelAccordionItem/FilterPanelAccordionItem.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Truncated:()=>Truncated,__namedExportsOrder:()=>__namedExportsOrder,default:()=>FilterPanelAccordionItem_stories});var react=__webpack_require__("../../node_modules/react/index.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs"),FilterPanelAccordionItem=__webpack_require__("../ibm-products/src/components/FilterPanel/FilterPanelAccordionItem/FilterPanelAccordionItem.js"),FilterPanel=__webpack_require__("../ibm-products/src/components/FilterPanel/FilterPanel.js"),FilterPanelAccordion=__webpack_require__("../ibm-products/src/components/FilterPanel/FilterPanelAccordion/FilterPanelAccordion.js"),FilterPanelCheckbox=__webpack_require__("../ibm-products/src/components/FilterPanel/FilterPanelCheckbox/FilterPanelCheckbox.js"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),lib=__webpack_require__("../../node_modules/@mdx-js/react/lib/index.js"),addon_docs_dist=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/index.mjs");function _createMdxContent(props){const _components=Object.assign({h1:"h1",h2:"h2",ul:"ul",li:"li",a:"a",p:"p",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(_components.h1,{id:"filterpanelaccordionitem",children:"FilterPanelAccordionItem"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,jsx_runtime.jsxs)(_components.ul,{children:["\n",(0,jsx_runtime.jsx)(_components.li,{children:(0,jsx_runtime.jsx)(_components.a,{href:"#overview",children:"Overview"})}),"\n",(0,jsx_runtime.jsx)(_components.li,{children:(0,jsx_runtime.jsx)(_components.a,{href:"#example-usage",children:"Example usage"})}),"\n",(0,jsx_runtime.jsx)(_components.li,{children:(0,jsx_runtime.jsx)(_components.a,{href:"#truncated-usage",children:"Truncated usage"})}),"\n",(0,jsx_runtime.jsx)(_components.li,{children:(0,jsx_runtime.jsx)(_components.a,{href:"#component-api",children:"Component API"})}),"\n"]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"overview",children:"Overview"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The ",(0,jsx_runtime.jsx)(_components.code,{children:"FilterPanelAccordionItem"})," can be expanded and collapsed and will accept any\nnumber of ",(0,jsx_runtime.jsx)(_components.code,{children:"children"}),". The ",(0,jsx_runtime.jsx)(_components.code,{children:"children"})," will be formatted as part of an internal\n",(0,jsx_runtime.jsx)(_components.code,{children:"TruncatedList"}),"."]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"example-usage",children:"Example usage"}),"\n",(0,jsx_runtime.jsx)(addon_docs_dist.Xz,{children:(0,jsx_runtime.jsx)(addon_docs_dist.oG,{of:Default})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"truncated-usage",children:"Truncated usage"}),"\n",(0,jsx_runtime.jsx)(addon_docs_dist.Xz,{children:(0,jsx_runtime.jsx)(addon_docs_dist.oG,{of:Truncated})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"component-api",children:"Component API"}),"\n",(0,jsx_runtime.jsx)(addon_docs_dist.$4,{})]})}const FilterPanelAccordionItem_FilterPanelAccordionItem=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)};var uuidv4=__webpack_require__("../ibm-products/src/global/js/utils/uuidv4.js"),_storybook_styles=__webpack_require__("../ibm-products/src/components/FilterPanel/_storybook-styles.scss");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const FilterPanelAccordionItem_stories={title:"IBM Products/Components/Filter panel/FilterPanelAccordionItem",component:FilterPanelAccordionItem.Q,tags:["autodocs"],parameters:{storySource:{source:"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * Copyright IBM Corp. 2024, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { action } from '@storybook/addon-actions';\nimport { FilterPanel, FilterPanelAccordion, FilterPanelAccordionItem, FilterPanelCheckbox } from '..';\nimport mdx from './FilterPanelAccordionItem.mdx';\nimport uuidv4 from '../../../global/js/utils/uuidv4';\nimport styles from '../_storybook-styles.scss';\nvar storyClass = 'filter-panel-stories';\nexport default {\n  title: 'IBM Products/Components/Filter panel/FilterPanelAccordionItem',\n  component: FilterPanelAccordionItem,\n  tags: ['autodocs'],\n  parameters: {\n    styles: styles,\n    docs: {\n      page: mdx\n    }\n  },\n  argTypes: {\n    children: {\n      table: {\n        disable: true\n      }\n    },\n    accordionItemProps: {\n      control: {\n        type: {}\n      }\n    },\n    className: {\n      control: {\n        type: {}\n      }\n    },\n    count: {\n      control: {\n        type: 'select',\n        labels: {\n          0: 'No value',\n          1: 'As number: 12',\n          2: 'As string: \"1,500\"'\n        }\n      },\n      mapping: {\n        0: undefined,\n        1: 12,\n        2: '1,500'\n      },\n      options: [0, 1, 2]\n    },\n    labelText: {\n      control: {\n        type: 'select',\n        labels: {\n          0: 'Plain text',\n          1: 'Very long text',\n          2: 'Using markup'\n        }\n      },\n      mapping: {\n        0: 'Accordion item',\n        1: 'Really, really long item name',\n        2: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"strong\", null, \"Formatted\"), \" \", /*#__PURE__*/React.createElement(\"em\", null, \"item\"), \" name\")\n      },\n      options: [0, 1, 2]\n    },\n    truncatedListProps: {\n      control: {\n        type: {}\n      }\n    }\n  },\n  args: {\n    count: 1,\n    labelText: 0\n  }\n};\nvar Template = function Template(args) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(storyClass, \"__viewport\")\n  }, /*#__PURE__*/React.createElement(FilterPanel, null, /*#__PURE__*/React.createElement(FilterPanelAccordion, {\n    labelText: \"Accordion\"\n  }, /*#__PURE__*/React.createElement(FilterPanelAccordionItem, _extends({}, args, {\n    accordionItemProps: {\n      onHeadingClick: function onHeadingClick(_ref) {\n        var isOpen = _ref.isOpen,\n          event = _ref.event;\n        action('onHeadingClick ({ isOpen, event })')(isOpen, event);\n      }\n    }\n  }), new Array(5).fill().map(function (item, index) {\n    return /*#__PURE__*/React.createElement(FilterPanelCheckbox, {\n      key: index,\n      count: 10,\n      labelText: \"Checkbox \".concat(index + 1),\n      id: uuidv4(),\n      onChange: function onChange(event, _ref2) {\n        var checked = _ref2.checked,\n          id = _ref2.id;\n        return action('onChange Checkbox (event, { checked, id })')(event, checked, id);\n      }\n    });\n  })))));\n};\nvar TemplateMany = function TemplateMany(args) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(storyClass, \"__viewport\")\n  }, /*#__PURE__*/React.createElement(FilterPanel, null, /*#__PURE__*/React.createElement(FilterPanelAccordion, {\n    labelText: \"Accordion\"\n  }, /*#__PURE__*/React.createElement(FilterPanelAccordionItem, _extends({}, args, {\n    accordionItemProps: {\n      onHeadingClick: function onHeadingClick(_ref3) {\n        var isOpen = _ref3.isOpen,\n          event = _ref3.event;\n        action('onHeadingClick ({ isOpen, event })')(isOpen, event);\n      }\n    },\n    truncatedListProps: {\n      expandedItemsLimit: 15\n    }\n  }), new Array(12).fill().map(function (item, index) {\n    return /*#__PURE__*/React.createElement(FilterPanelCheckbox, {\n      key: index,\n      count: 10,\n      labelText: \"Checkbox \".concat(index + 1),\n      id: uuidv4(),\n      onChange: function onChange(event, _ref4) {\n        var checked = _ref4.checked,\n          id = _ref4.id;\n        return action('onChange Checkbox (event, { checked, id })')(event, checked, id);\n      }\n    });\n  })))));\n};\nexport var Default = Template.bind({});\nDefault.storyName = 'Default';\nDefault.args = {\n  title: ''\n};\nexport var Truncated = TemplateMany.bind({});\nTruncated.storyName = 'Truncated';\nTruncated.args = {\n  title: ''\n};",locationsMap:{default:{startLoc:{col:15,line:85},endLoc:{col:1,line:111},startBody:{col:15,line:85},endBody:{col:1,line:111}},truncated:{startLoc:{col:19,line:112},endLoc:{col:1,line:141},startBody:{col:19,line:112},endBody:{col:1,line:141}}}},styles:_storybook_styles.Z,docs:{page:FilterPanelAccordionItem_FilterPanelAccordionItem}},argTypes:{children:{table:{disable:!0}},accordionItemProps:{control:{type:{}}},className:{control:{type:{}}},count:{control:{type:"select",labels:{0:"No value",1:"As number: 12",2:'As string: "1,500"'}},mapping:{0:void 0,1:12,2:"1,500"},options:[0,1,2]},labelText:{control:{type:"select",labels:{0:"Plain text",1:"Very long text",2:"Using markup"}},mapping:{0:"Accordion item",1:"Really, really long item name",2:react.createElement(react.Fragment,null,react.createElement("strong",null,"Formatted")," ",react.createElement("em",null,"item")," name")},options:[0,1,2]},truncatedListProps:{control:{type:{}}}},args:{count:1,labelText:0}};var Default=function Template(args){return react.createElement("div",{className:"".concat("filter-panel-stories","__viewport")},react.createElement(FilterPanel.h,null,react.createElement(FilterPanelAccordion.p,{labelText:"Accordion"},react.createElement(FilterPanelAccordionItem.Q,_extends({},args,{accordionItemProps:{onHeadingClick:function onHeadingClick(_ref){var isOpen=_ref.isOpen,event=_ref.event;(0,dist.aD)("onHeadingClick ({ isOpen, event })")(isOpen,event)}}}),new Array(5).fill().map((function(item,index){return react.createElement(FilterPanelCheckbox.t,{key:index,count:10,labelText:"Checkbox ".concat(index+1),id:(0,uuidv4.Z)(),onChange:function onChange(event,_ref2){var checked=_ref2.checked,id=_ref2.id;return(0,dist.aD)("onChange Checkbox (event, { checked, id })")(event,checked,id)}})}))))))}.bind({});Default.storyName="Default",Default.args={title:""};var Truncated=function TemplateMany(args){return react.createElement("div",{className:"".concat("filter-panel-stories","__viewport")},react.createElement(FilterPanel.h,null,react.createElement(FilterPanelAccordion.p,{labelText:"Accordion"},react.createElement(FilterPanelAccordionItem.Q,_extends({},args,{accordionItemProps:{onHeadingClick:function onHeadingClick(_ref3){var isOpen=_ref3.isOpen,event=_ref3.event;(0,dist.aD)("onHeadingClick ({ isOpen, event })")(isOpen,event)}},truncatedListProps:{expandedItemsLimit:15}}),new Array(12).fill().map((function(item,index){return react.createElement(FilterPanelCheckbox.t,{key:index,count:10,labelText:"Checkbox ".concat(index+1),id:(0,uuidv4.Z)(),onChange:function onChange(event,_ref4){var checked=_ref4.checked,id=_ref4.id;return(0,dist.aD)("onChange Checkbox (event, { checked, id })")(event,checked,id)}})}))))))}.bind({});Truncated.storyName="Truncated",Truncated.args={title:""},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  return <div className={`${storyClass}__viewport`}>\n      <FilterPanel>\n        <FilterPanelAccordion labelText=\"Accordion\">\n          <FilterPanelAccordionItem {...args} accordionItemProps={{\n          onHeadingClick: ({\n            isOpen,\n            event\n          }) => {\n            action('onHeadingClick ({ isOpen, event })')(isOpen, event);\n          }\n        }}>\n            {new Array(5).fill().map((item, index) => {\n            return <FilterPanelCheckbox key={index} count={10} labelText={`Checkbox ${index + 1}`} id={uuidv4()} onChange={(event, {\n              checked,\n              id\n            }) => action('onChange Checkbox (event, { checked, id })')(event, checked, id)} />;\n          })}\n          </FilterPanelAccordionItem>\n        </FilterPanelAccordion>\n      </FilterPanel>\n    </div>;\n}",...Default.parameters?.docs?.source}}},Truncated.parameters={...Truncated.parameters,docs:{...Truncated.parameters?.docs,source:{originalSource:"args => {\n  return <div className={`${storyClass}__viewport`}>\n      <FilterPanel>\n        <FilterPanelAccordion labelText=\"Accordion\">\n          <FilterPanelAccordionItem {...args} accordionItemProps={{\n          onHeadingClick: ({\n            isOpen,\n            event\n          }) => {\n            action('onHeadingClick ({ isOpen, event })')(isOpen, event);\n          }\n        }} truncatedListProps={{\n          expandedItemsLimit: 15\n        }}>\n            {new Array(12).fill().map((item, index) => {\n            return <FilterPanelCheckbox key={index} count={10} labelText={`Checkbox ${index + 1}`} id={uuidv4()} onChange={(event, {\n              checked,\n              id\n            }) => action('onChange Checkbox (event, { checked, id })')(event, checked, id)} />;\n          })}\n          </FilterPanelAccordionItem>\n        </FilterPanelAccordion>\n      </FilterPanel>\n    </div>;\n}",...Truncated.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Truncated"]}}]);